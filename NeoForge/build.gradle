import net.darkhax.curseforgegradle.Constants as CFConstants
import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.neoforged.gradle.userdev' version '7.+'
}

base {
    archivesName = "$mod_name-$mc_version-neoforge"
}

println "NeoForge: $neo_version"

minecraft.accessTransformers.file('src/main/resources/META-INF/accesstransformer.cfg')

subsystems {
    parchment {
        minecraftVersion = mc_version
        mappingsVersion = mappings_version
    }
}

runs {
    configureEach {
        workingDirectory rootProject.file('run')

        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        systemProperty 'neoforge.enabledGameTestNamespaces', mod_id

        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "$buildDir/createSrgToMcp/output.srg"

        modSource sourceSets.main
    }

    client
}

dependencies {
    implementation "net.neoforged:neoforge:$neo_version"

    compileOnly project(':Common')

    compileOnly "com.github.glitchfiend:SereneSeasons-neoforge:$mc_version-$sereneseasons_version"
    compileOnly "com.github.glitchfiend:GlitchCore-neoforge:$mc_version-$glitchcore_version"

    compileOnly "org.embeddedt:embeddium-$mc_version:$embeddium_version+mc$mc_version"
    compileOnly "maven.modrinth:oculus:$oculus_version"

    runtimeOnly "maven.modrinth:spark:1.10.61-neoforge"

    compileOnly "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"
}

compileJava {
    if (!it.name.startsWith('neo'))
        source project(':Common').sourceSets.main.allSource
}

sourcesJar {
    from project(':Common').sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

project.evaluationDependsOn(':Changelog')

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    dependsOn(tasks.jar)
    dependsOn(':Changelog:makeHtmlChangelog')

    apiToken = System.getenv('CURSEFORGE_TOKEN')

    var modFile = upload('937011', tasks.jar.archiveFile)
    modFile.displayName = "${base.archivesName.get()}-$version"
    modFile.releaseType = CFConstants.RELEASE_TYPE_BETA
    modFile.addGameVersion(mc_version, 'client')
    modFile.addModLoader('NeoForge')
    modFile.addJavaVersion "Java $java_version"

    modFile.changelogType = CFConstants.CHANGELOG_HTML
    modFile.changelog = file("${project(':Changelog').projectDir}/changelog.html").getText().replace([ '${version}': "$mc_version-$version" ])
}

modrinth {
    token = System.getenv('MODRINTH_TOKEN')

    projectId = 'fbp-renewed'

    versionName = "${base.archivesName.get()}-$version"
    versionNumber = "$version+neoforge"
    versionType = 'beta'

    gameVersions = [ mc_version ]
    loaders = [ 'neoforge' ]

    changelog = provider { file("${project(':Changelog').projectDir}/changelog.md").getText().replace([ '${version}': "$mc_version-$version" ]) }

    uploadFile = tasks.jar
    additionalFiles = [ tasks.sourcesJar ]
}

tasks.modrinth.dependsOn(tasks.jar)
tasks.modrinth.dependsOn(tasks.sourcesJar)

tasks.modrinth.dependsOn(':Changelog:makeMarkdownChangelog')

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar

            artifactId archivesBaseName
        }
    }

    repositories {
        mavenLocal()
    }
}
