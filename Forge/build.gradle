import net.darkhax.curseforgegradle.Constants as CFConstants
import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'io.freefair.lombok' version '6.6.+'

    id 'idea'
    id 'maven-publish'
}

apply plugin: 'net.darkhax.curseforgegradle'
apply plugin: 'com.modrinth.minotaur'

base {
    archivesName = "$mod_name-$mc_version-forge"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

println "Using Forge: $forge_version, for Minecraft: $mc_version, with Mappings: $mappings_channel-$mappings_version"

minecraft {
    mappings channel: mappings_channel, version: "$mappings_version-$mc_version"

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "$buildDir/createSrgToMcp/output.srg"

            ideaModule "${rootProject.name}.${project.name}.main"
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id

            args '--nogui'
        }
    }
}

sourceSets.each {
    var dir = layout.buildDirectory.dir("sourcesSets/$it.name")

    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

dependencies {
    minecraft "net.minecraftforge:forge:$mc_version-$forge_version"

    compileOnly "org.projectlombok:lombok:$lombok_version"

    compileOnly fg.deobf("com.github.glitchfiend:SereneSeasons:$mc_version-$sereneseasons_version")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:$mixinextras_version"))

    implementation(jarJar("io.github.llamalad7:mixinextras-forge:$mixinextras_version")) {
        jarJar.ranged(it, "[$mixinextras_version,)")
    }

    annotationProcessor "org.spongepowered:mixin:$mixin_processor_version:processor"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"
}

// Workaround for SpongePowered/MixinGradle#38
afterEvaluate {
    tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
    tasks.configureReobfTaskForReobfJarJar.mustRunAfter(tasks.compileJava)
}

jar {
    archiveClassifier = 'slim'

    finalizedBy('reobfJar')
}

tasks.jarJar {
    archiveClassifier = ''

    finalizedBy('reobfJarJar')
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

artifacts {
    archives jar
    archives sourcesJar
}

project.evaluationDependsOn(':Changelog')

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    dependsOn(tasks.jarJar)
    dependsOn(':Changelog:makeHtmlChangelog')

    apiToken = System.getenv('CURSEFORGE_TOKEN')

    var modFile = upload('937011', tasks.jarJar.archiveFile)
    modFile.displayName = "${base.archivesName.get()}-$version"
    modFile.releaseType = CFConstants.RELEASE_TYPE_BETA
    modFile.addGameVersion(mc_version, 'client')
    modFile.addModLoader('Forge')
    modFile.addJavaVersion 'Java 17'

    modFile.changelogType = CFConstants.CHANGELOG_HTML
    modFile.changelog = file("${project(':Changelog').projectDir}/changelog.html").getText().replace([ '${version}': "$mc_version-$version" ])
}

modrinth {
    token = System.getenv('MODRINTH_TOKEN')

    projectId = 'fbp-renewed'

    versionName = "${base.archivesName.get()}-$version"
    versionNumber = version
    versionType = 'beta'

    gameVersions = [ mc_version ]
    loaders = [ 'forge' ]

    changelog = provider { file("${project(':Changelog').projectDir}/changelog.md").getText().replace([ '${version}': "$mc_version-$version" ]) }

    uploadFile = tasks.jarJar
    additionalFiles = [ tasks.sourcesJar ]
}

tasks.modrinth.dependsOn(tasks.jarJar)
tasks.modrinth.dependsOn(tasks.sourcesJar)

tasks.modrinth.dependsOn(':Changelog:makeMarkdownChangelog')

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId archivesBaseName

            from components.java
            jarJar.component(it)
        }
    }

    repositories {
        mavenLocal()
    }
}
