import net.darkhax.curseforgegradle.Constants as CFConstants
import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

base {
    archivesName = "$mod_name-$mc_version-forge"
}

mixin {
    config "${mod_id}.mixins.json"
    config "${mod_id}.forge.mixins.json"
}

println "Forge: $forge_version"

minecraft {
    mappings channel: mappings_channel, version: "$mappings_version-1.21" // "$mappings_version-$mc_version"

    reobf = false
    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory rootProject.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "$buildDir/createSrgToMcp/output.srg"

            ideaModule "${rootProject.name}.${project.name}.main"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(':Common').sourceSets.main
                }
            }
        }

        client
    }
}

sourceSets.each {
    var dir = layout.buildDirectory.dir("sourcesSets/$it.name")

    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

dependencies {
    minecraft "net.minecraftforge:forge:$mc_version-$forge_version"

    compileOnly project(':Common')

    compileOnly "com.github.glitchfiend:SereneSeasons-forge:$mc_version-$sereneseasons_version"
    compileOnly "com.github.glitchfiend:GlitchCore-forge:$mc_version-$glitchcore_version"

    compileOnly "org.embeddedt:embeddium-$mc_version:$embeddium_version+mc$mc_version"
    compileOnly "maven.modrinth:oculus:$oculus_version"

    testCompileOnly compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:$mixin_extras_version"))

    implementation(jarJar("io.github.llamalad7:mixinextras-forge:$mixin_extras_version")) {
        jarJar.ranged(it, "[$mixin_extras_version,)")
    }

    compileOnly "org.projectlombok:lombok:$lombok_version"

    annotationProcessor "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.spongepowered:mixin:$mixin_processor_version:processor"

    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

// Workaround for SpongePowered/MixinGradle#38
if (minecraft.reobf) {
    afterEvaluate {
        tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
        tasks.configureReobfTaskForReobfJarJar.mustRunAfter(tasks.compileJava)
    }
}

jar {
    archiveClassifier = 'slim'

    manifest {
        attributes([
                'MixinConfigs': "${mod_id}.mixins.json,${mod_id}.forge.mixins.json"
        ])
    }

    if (minecraft.reobf)
        finalizedBy('reobfJar')
    else
        finalizedBy('jarJar')
}

tasks.jarJar {
    archiveClassifier = ''

    if (minecraft.reobf)
        finalizedBy('reobfJarJar')
}

sourcesJar {
    from project(':Common').sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

project.evaluationDependsOn(':Changelog')

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    dependsOn(tasks.jarJar)
    dependsOn(':Changelog:makeHtmlChangelog')

    apiToken = System.getenv('CURSEFORGE_TOKEN')

    var modFile = upload('937011', tasks.jarJar.archiveFile)
    modFile.displayName = "${base.archivesName.get()}-$version"
    modFile.releaseType = CFConstants.RELEASE_TYPE_BETA
    modFile.addGameVersion(mc_version, 'client')
    modFile.addModLoader('Forge')
    modFile.addJavaVersion "Java $java_version"

    modFile.changelogType = CFConstants.CHANGELOG_HTML
    modFile.changelog = file("${project(':Changelog').projectDir}/changelog.html").getText().replace([ '${version}': "$mc_version-$version" ])
}

modrinth {
    token = System.getenv('MODRINTH_TOKEN')

    projectId = 'fbp-renewed'

    versionName = "${base.archivesName.get()}-$version"
    versionNumber = "$version+forge"
    versionType = 'beta'

    gameVersions = [ mc_version ]
    loaders = [ 'forge' ]

    changelog = provider { file("${project(':Changelog').projectDir}/changelog.md").getText().replace([ '${version}': "$mc_version-$version" ]) }

    uploadFile = tasks.jarJar
    additionalFiles = [ tasks.sourcesJar ]
}

tasks.modrinth.dependsOn(tasks.jarJar)
tasks.modrinth.dependsOn(tasks.sourcesJar)

tasks.modrinth.dependsOn(':Changelog:makeMarkdownChangelog')

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar

            jarJar.component(it)

            artifactId archivesBaseName
        }
    }

    repositories {
        mavenLocal()
    }
}
