import net.darkhax.curseforgegradle.Constants
import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'

    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'com.modrinth.minotaur' version '2.+'

    id 'io.freefair.lombok' version '8.+'

    id 'net.neoforged.gradleutils' version '3.+'
}

apply plugin: 'idea'
apply plugin: 'maven-publish'

gradleutils.version {
    tags {
        if (mod_version_label != 'release')
            label = mod_version_label

        appendCommitOffset = false
    }
}

base {
    archivesName = "$mod_name-$mc_version-forge"
}

version = gradleutils.version.toString()
group = "hantonik.$mod_id"

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

println "$mod_name, Version: ${gradleutils.version.toString()}"
println "Minecraft: $mc_version, Forge: $forge_version, Mappings: $mappings_channel-$mappings_version"

java {
    toolchain.languageVersion = JavaLanguageVersion.of(8)

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withSourcesJar()
}

minecraft {
    mappings channel: mappings_channel, version: "$mappings_version-$mc_version"

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "$buildDir/createSrgToMcp/output.srg"

            ideaModule "${project.name}.main"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client
    }
}

repositories {
    maven { url = "https://api.modrinth.com/maven" }
}

dependencies {
    minecraft "net.minecraftforge:forge:$mc_version-$forge_version"

    compileOnly fg.deobf("maven.modrinth:serene-seasons:$sereneseasons_version")

    compileOnly fg.deobf("maven.modrinth:rubidium:$rubidium_version")
    compileOnly fg.deobf("maven.modrinth:oculus:$mc_version-$oculus_version")

    runtimeOnly fg.deobf("maven.modrinth:spark:$spark_version")

    compileOnly "org.projectlombok:lombok:$lombok_version"

    annotationProcessor "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.spongepowered:mixin:$mixin_processor_version:processor"
}

// Workaround for SpongePowered/MixinGradle#38
afterEvaluate {
    tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            'mod_id'      : mod_id,
            'mod_name'    : mod_name,
            'mod_version' : version,

            'mc_version'  : mc_version
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title': mod_id,
                'Specification-Vendor': 'Hantonik',
                'Specification-Version': '1',
                'Implementation-Title': rootProject.name,
                'Implementation-Version': jar.archiveVersion,
                'Implementation-Vendor': 'Hantonik',

                'MixinConfigs': "${mod_id}.mixins.json"
        ])
    }

    finalizedBy('reobfJar')
}

artifacts {
    archives jar
    archives sourcesJar
}

project.evaluationDependsOn(':Changelog')

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    dependsOn(tasks.jar)
    dependsOn(':Changelog:makeHtmlChangelog')

    apiToken = System.getenv('CURSEFORGE_TOKEN')

    var modFile = upload('937011', tasks.jar.archiveFile)
    modFile.displayName = "${base.archivesName.get()}-$version"
    modFile.releaseType = "$mod_version_label"
    modFile.addGameVersion(mc_version, 'client')
    modFile.addModLoader('Forge')
    modFile.addJavaVersion "Java 8"

    modFile.changelogType = Constants.CHANGELOG_HTML
    modFile.changelog = file("${project(':Changelog').projectDir}/changelog.html").getText().replace([ '${version}': "$mc_version-$version" ])
}

modrinth {
    token = System.getenv('MODRINTH_TOKEN')

    projectId = 'fbp-renewed'

    versionName = "${base.archivesName.get()}-$version"
    versionNumber = "$version+forge"
    versionType = "$mod_version_label"

    gameVersions = [ mc_version ]
    loaders = [ 'forge' ]

    changelog = provider { file("${project(':Changelog').projectDir}/changelog.md").getText().replace([ '${version}': "$mc_version-$version" ]) }

    uploadFile = tasks.jar
    additionalFiles = [ tasks.sourcesJar ]
}

tasks.modrinth.dependsOn(tasks.jar)
tasks.modrinth.dependsOn(tasks.sourcesJar)

tasks.modrinth.dependsOn(':Changelog:makeMarkdownChangelog')

tasks.register('publishMod') {
    dependsOn('publishCurseForge')
    dependsOn('modrinth')
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar

            artifactId archivesBaseName
        }
    }

    repositories {
        mavenLocal()
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
