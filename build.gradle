plugins {
    id 'org.spongepowered.gradle.vanilla' version '0.2.+' apply false

    id 'net.darkhax.curseforgegradle' version '1.+' apply false
    id 'com.modrinth.minotaur' version '2.+' apply false

    id 'io.freefair.lombok' version '8.+' apply false

    id 'net.neoforged.gradleutils' version '3.+'
}

gradleutils.version {
    tags {
        if (mod_version_label != 'release')
            label = mod_version_label

        appendCommitOffset = false
    }
}

println "$mod_name, Version: ${gradleutils.version.toString()}"
println "Minecraft: $mc_version, Mappings: $mappings_channel-$mappings_version"

subprojects {
    if (project.name != 'Changelog') {
        apply plugin: 'java'

        if (project.name != 'Common') {
            apply plugin: 'net.darkhax.curseforgegradle'
            apply plugin: 'com.modrinth.minotaur'

            evaluationDependsOn(':Common')
        }

        apply plugin: 'io.freefair.lombok'

        apply plugin: 'idea'
        apply plugin: 'maven-publish'

        java {
            toolchain.languageVersion = JavaLanguageVersion.of(java_version)

            withSourcesJar()

            sourceCompatibility = JavaVersion."VERSION_$java_version"
            targetCompatibility = JavaVersion."VERSION_$java_version"
        }

        idea {
            module {
                downloadSources = true
                downloadJavadoc = true
            }
        }
    }

    version = gradleutils.version.toString()
    group = "hantonik.$mod_id"

    tasks.withType(JavaCompile).configureEach {
        if (project.name != 'NeoForge')
            source project(':Common').sourceSets.main.allSource

        options.encoding = 'UTF-8'
    }

    tasks.withType(ProcessResources).configureEach {
        from project(':Common').sourceSets.main.resources

        var replaceProperties = [
                'mod_id'      : mod_id,
                'mod_name'    : mod_name,
                'mod_version' : version,

                'mc_version'  : mc_version,
                'java_version': java_version
        ]

        inputs.properties replaceProperties

        filesMatching(['META-INF/*mods.toml', 'fabric.mod.json', 'pack.mcmeta']) {
            expand replaceProperties
        }
    }

    tasks.withType(Jar).configureEach {
        manifest {
            attributes([
                    'Specification-Title': mod_id,
                    'Specification-Vendor': 'Hantonik',
                    'Specification-Version': '1',
                    'Implementation-Title': rootProject.name,
                    'Implementation-Version': jar.archiveVersion,
                    'Implementation-Vendor': 'Hantonik'
            ])
        }
    }
}

tasks.register('publishMod') {
    dependsOn(':Forge:publishCurseForge').finalizedBy(':NeoForge:publishCurseForge')
    dependsOn(':Forge:modrinth').finalizedBy(':NeoForge:modrinth')

    tasks.getByPath(':NeoForge:publishCurseForge').finalizedBy(':Fabric:publishCurseForge')
    tasks.getByPath(':NeoForge:modrinth').finalizedBy(':Fabric:modrinth')
}
